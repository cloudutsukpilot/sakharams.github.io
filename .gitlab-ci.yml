# Docker image for the runner
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH

cache:
  paths:
    - vendor/

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task.

stages:
  - test
  - testhtml
  - sonarcloud-check
  - deploy
 
# Defining the job to execute on the runner
# For Gitlab pages, the job has a specific name called pages
# Jekyll will output the files to public directory
# Docker image for the runner

build_test_site:
  stage: test
  image:
    name: ruby:3.2
  before_script:
    - gem install bundler
    - bundle install --path vendor
  script:
    - bundle exec jekyll build -d test
  artifacts:
    paths:
      - test/
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

htmlproofer_for_test_site:
  stage: testhtml
  image:
    name: ruby:3.2
  before_script:
    - gem install bundler
    - bundle install --path vendor
  dependencies:
    - build_test_site
  script:
    - bundle exec htmlproofer test/ --disable-external --ignore-urls "/^http://127.0.0.1/,/^http://0.0.0.0/,/^http://localhost/"
  artifacts:
    paths:
      - testhtml
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  allow_failure: true

sonarcloud-check:
  stage: sonarcloud-check
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - main
    - develop

pages:
  stage: deploy
  image:
    name: ruby:3.2
  before_script:
    - gem install bundler
    - bundle install --path vendor
  script:
    - bundle exec jekyll build -d public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main"